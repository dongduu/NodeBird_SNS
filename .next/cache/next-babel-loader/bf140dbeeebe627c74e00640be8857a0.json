{"ast":null,"code":"import { all, fork, put, delay, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, LOG_IN_REQUEST, LOG_OUT_REQUEST, SIGN_UP_REQUEST, SIGN_UP_FAILURE, SIGN_UP_SUCCESS } from \"../reducers/user\";\n\nfunction logInAPI() {\n  return axios.post(\"/api/login\");\n}\n\nfunction* logIn() {\n  try {\n    // const result = yield fork(logInAPI);\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction* logOut() {\n  try {\n    // const result = yield fork(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      eroor: err.response.data\n    });\n  }\n}\n\nfunction signUpAPI() {\n  return axios.post(\"/api/signUp\");\n}\n\nfunction* signUp() {\n  try {\n    // const result = yield fork(signUpAPI);\n    yield delay(1000);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      eroor: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["/Users/dongduu/Desktop/NodeBird_SNS/sagas/user.js"],"names":["all","fork","put","delay","takeLatest","axios","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","LOG_IN_REQUEST","LOG_OUT_REQUEST","SIGN_UP_REQUEST","SIGN_UP_FAILURE","SIGN_UP_SUCCESS","logInAPI","post","logIn","type","data","action","err","error","response","logOutAPI","logOut","eroor","signUpAPI","signUp","watchLogIn","watchLogOut","watchSignUp","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,KAAzB,EAAgCC,UAAhC,QAAkD,oBAAlD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,cADF,EAEEC,cAFF,EAGEC,eAHF,EAIEC,eAJF,EAKEC,cALF,EAMEC,eANF,EAOEC,eAPF,EAQEC,eARF,EASEC,eATF,QAUO,kBAVP;;AAYA,SAASC,QAAT,GAAoB;AAClB,SAAOV,KAAK,CAACW,IAAN,CAAW,YAAX,CAAP;AACD;;AAED,UAAUC,KAAV,GAAkB;AAChB,MAAI;AACF;AACA,UAAMd,KAAK,CAAC,IAAD,CAAX;AACA,UAAMD,GAAG,CAAC;AACRgB,MAAAA,IAAI,EAAEZ,cADE;AAERa,MAAAA,IAAI,EAAEC,MAAM,CAACD;AAFL,KAAD,CAAT;AAID,GAPD,CAOE,OAAOE,GAAP,EAAY;AACZ,UAAMnB,GAAG,CAAC;AAAEgB,MAAAA,IAAI,EAAEX,cAAR;AAAwBe,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaJ;AAA5C,KAAD,CAAT;AACD;AACF;;AAED,SAASK,SAAT,GAAqB;AACnB,SAAOnB,KAAK,CAACW,IAAN,CAAW,aAAX,CAAP;AACD;;AAED,UAAUS,MAAV,GAAmB;AACjB,MAAI;AACF;AACA,UAAMtB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMD,GAAG,CAAC;AACRgB,MAAAA,IAAI,EAAEV;AADE,KAAD,CAAT;AAGD,GAND,CAME,OAAOa,GAAP,EAAY;AACZ,UAAMnB,GAAG,CAAC;AAAEgB,MAAAA,IAAI,EAAET,eAAR;AAAyBiB,MAAAA,KAAK,EAAEL,GAAG,CAACE,QAAJ,CAAaJ;AAA7C,KAAD,CAAT;AACD;AACF;;AAED,SAASQ,SAAT,GAAqB;AACnB,SAAOtB,KAAK,CAACW,IAAN,CAAW,aAAX,CAAP;AACD;;AAED,UAAUY,MAAV,GAAmB;AACjB,MAAI;AACF;AACA,UAAMzB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMD,GAAG,CAAC;AACRgB,MAAAA,IAAI,EAAEJ;AADE,KAAD,CAAT;AAGD,GAND,CAME,OAAOO,GAAP,EAAY;AACZ,UAAMnB,GAAG,CAAC;AAAEgB,MAAAA,IAAI,EAAEL,eAAR;AAAyBa,MAAAA,KAAK,EAAEL,GAAG,CAACE,QAAJ,CAAaJ;AAA7C,KAAD,CAAT;AACD;AACF;;AAED,UAAUU,UAAV,GAAuB;AACrB,QAAMzB,UAAU,CAACM,cAAD,EAAiBO,KAAjB,CAAhB;AACD;;AAED,UAAUa,WAAV,GAAwB;AACtB,QAAM1B,UAAU,CAACO,eAAD,EAAkBc,MAAlB,CAAhB;AACD;;AAED,UAAUM,WAAV,GAAwB;AACtB,QAAM3B,UAAU,CAACQ,eAAD,EAAkBgB,MAAlB,CAAhB;AACD;;AAED,eAAe,UAAUI,QAAV,GAAqB;AAClC,QAAMhC,GAAG,CAAC,CAACC,IAAI,CAAC4B,UAAD,CAAL,EAAmB5B,IAAI,CAAC6B,WAAD,CAAvB,EAAsC7B,IAAI,CAAC8B,WAAD,CAA1C,CAAD,CAAT;AACD","sourcesContent":["import { all, fork, put, delay, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport {\n  LOG_IN_SUCCESS,\n  LOG_IN_FAILURE,\n  LOG_OUT_SUCCESS,\n  LOG_OUT_FAILURE,\n  LOG_IN_REQUEST,\n  LOG_OUT_REQUEST,\n  SIGN_UP_REQUEST,\n  SIGN_UP_FAILURE,\n  SIGN_UP_SUCCESS,\n} from \"../reducers/user\";\n\nfunction logInAPI() {\n  return axios.post(\"/api/login\");\n}\n\nfunction* logIn() {\n  try {\n    // const result = yield fork(logInAPI);\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({ type: LOG_IN_FAILURE, error: err.response.data });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction* logOut() {\n  try {\n    // const result = yield fork(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS,\n    });\n  } catch (err) {\n    yield put({ type: LOG_OUT_FAILURE, eroor: err.response.data });\n  }\n}\n\nfunction signUpAPI() {\n  return axios.post(\"/api/signUp\");\n}\n\nfunction* signUp() {\n  try {\n    // const result = yield fork(signUpAPI);\n    yield delay(1000);\n    yield put({\n      type: SIGN_UP_SUCCESS,\n    });\n  } catch (err) {\n    yield put({ type: SIGN_UP_FAILURE, eroor: err.response.data });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}\n"]},"metadata":{},"sourceType":"module"}
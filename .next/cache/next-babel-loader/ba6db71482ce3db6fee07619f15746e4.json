{"ast":null,"code":"import next from \"next\";\nimport { createWrapper } from \"next-redux-wrapper\";\nimport { applyMiddleware, createStore, compose } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport createSagaMiddleware from \"redux-saga\";\nimport reducer from \"../reducers/index\";\n\nconst loggerMiddleware = ({\n  dispatch,\n  getState\n}) => next => action => {\n  console.log(action);\n  return next(action);\n};\n\nconst configureStore = () => {\n  const middlewares = [loggerMiddleware];\n  const enhancer = false ? compose(applyMiddleware(...middlewares)) : composeWithDevTools(applyMiddleware(...middlewares));\n  const store = createStore(reducer, enhancer);\n  return store;\n};\n\nconst wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["/Users/dongduu/Desktop/NodeBird_SNS/store/configureStore.js"],"names":["next","createWrapper","applyMiddleware","createStore","compose","composeWithDevTools","createSagaMiddleware","reducer","loggerMiddleware","dispatch","getState","action","console","log","configureStore","middlewares","enhancer","store","wrapper","debug"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,SAASC,eAAT,EAA0BC,WAA1B,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AAEA,OAAOC,OAAP,MAAoB,mBAApB;;AAEA,MAAMC,gBAAgB,GACpB,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KACCV,IAAD,IACCW,MAAD,IAAY;AACVC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,SAAOX,IAAI,CAACW,MAAD,CAAX;AACD,CANH;;AAQA,MAAMG,cAAc,GAAG,MAAM;AAC3B,QAAMC,WAAW,GAAG,CAACP,gBAAD,CAApB;AACA,QAAMQ,QAAQ,GACZ,QACIZ,OAAO,CAACF,eAAe,CAAC,GAAGa,WAAJ,CAAhB,CADX,GAEIV,mBAAmB,CAACH,eAAe,CAAC,GAAGa,WAAJ,CAAhB,CAHzB;AAIA,QAAME,KAAK,GAAGd,WAAW,CAACI,OAAD,EAAUS,QAAV,CAAzB;AACA,SAAOC,KAAP;AACD,CARD;;AAUA,MAAMC,OAAO,GAAGjB,aAAa,CAACa,cAAD,EAAiB;AAC5CK,EAAAA,KAAK;AADuC,CAAjB,CAA7B;AAIA,eAAeD,OAAf","sourcesContent":["import next from \"next\";\nimport { createWrapper } from \"next-redux-wrapper\";\nimport { applyMiddleware, createStore, compose } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport createSagaMiddleware from \"redux-saga\";\n\nimport reducer from \"../reducers/index\";\n\nconst loggerMiddleware =\n  ({ dispatch, getState }) =>\n  (next) =>\n  (action) => {\n    console.log(action);\n    return next(action);\n  };\n\nconst configureStore = () => {\n  const middlewares = [loggerMiddleware];\n  const enhancer =\n    process.env.NODE_ENV === \"production\"\n      ? compose(applyMiddleware(...middlewares))\n      : composeWithDevTools(applyMiddleware(...middlewares));\n  const store = createStore(reducer, enhancer);\n  return store;\n};\n\nconst wrapper = createWrapper(configureStore, {\n  debug: process.env.NODE_ENV === \"development\",\n});\n\nexport default wrapper;\n"]},"metadata":{},"sourceType":"module"}
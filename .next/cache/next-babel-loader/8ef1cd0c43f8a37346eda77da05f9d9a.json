{"ast":null,"code":"import { all, fork, put, takeLatest, throttle, delay } from \"redux-saga/effects\";\nimport axios from \"axois\"; // fork - 비동기 함수 호출\n// call - 동기 함수 호출\n// take - 한번만 가져옴\n// takeEvery - 클릭할 때마다 가져옴\n// takeLatest - 마지막으로 누른 것만 인식하고 가져옴(백엔드 상에서는 인식할 수가 없어서 문제)\n// throttle - 시간을 지정해서 그 시간 동안 한번만 가져옴\n\nfunction logInAPI() {\n  return axios.post(\"/api/login\");\n}\n\nfunction* logIn() {\n  try {\n    // const result = yield fork(logInAPI);\n    yield delay(1000);\n    yield put({\n      type: \"LOG_IN_SUCCESS\",\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: \"LOG_IN_FAILURE\",\n      data: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction* logOut() {\n  try {\n    // const result = yield fork(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: \"LOG_OUT_SUCCESS\",\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: \"LOG_OUT_FAILURE\",\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI() {\n  return axios.post(\"/api/post\");\n}\n\nfunction* addPost() {\n  try {\n    // const result = yield fork(addPostAPI);\n    yield delay(1000);\n    yield put({\n      type: \"ADD_POST_SUCCESS\",\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: \"ADD_POST_FAILURE\",\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  // 각각의 이벤트 리스너 역할\n  yield takeLatest(\"LOG_IN_REQUEST\", logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(\"LOG_OUT_REQUEST\", logOut);\n}\n\nfunction* watchAddPost() {\n  yield throttle(\"ADD_POST_REQUEST\", addPost, 2000);\n}\n\nexport default function* rootSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchAddPost)]); // all로 이벤트 리스너 등록\n}","map":{"version":3,"sources":["/Users/dongduu/Desktop/NodeBird_SNS/sagas/index.js"],"names":["all","fork","put","takeLatest","throttle","delay","axios","logInAPI","post","logIn","type","data","result","err","response","logOutAPI","logOut","addPostAPI","addPost","watchLogIn","watchLogOut","watchAddPost","rootSaga"],"mappings":"AAAA,SACEA,GADF,EAEEC,IAFF,EAGEC,GAHF,EAIEC,UAJF,EAKEC,QALF,EAMEC,KANF,QAOO,oBAPP;AAQA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,QAAT,GAAoB;AAClB,SAAOD,KAAK,CAACE,IAAN,CAAW,YAAX,CAAP;AACD;;AAED,UAAUC,KAAV,GAAkB;AAChB,MAAI;AACF;AACA,UAAMJ,KAAK,CAAC,IAAD,CAAX;AACA,UAAMH,GAAG,CAAC;AACRQ,MAAAA,IAAI,EAAE,gBADE;AAERC,MAAAA,IAAI,EAAEC,MAAM,CAACD;AAFL,KAAD,CAAT;AAID,GAPD,CAOE,OAAOE,GAAP,EAAY;AACZ,UAAMX,GAAG,CAAC;AAAEQ,MAAAA,IAAI,EAAE,gBAAR;AAA0BC,MAAAA,IAAI,EAAEE,GAAG,CAACC,QAAJ,CAAaH;AAA7C,KAAD,CAAT;AACD;AACF;;AAED,SAASI,SAAT,GAAqB;AACnB,SAAOT,KAAK,CAACE,IAAN,CAAW,aAAX,CAAP;AACD;;AAED,UAAUQ,MAAV,GAAmB;AACjB,MAAI;AACF;AACA,UAAMX,KAAK,CAAC,IAAD,CAAX;AACA,UAAMH,GAAG,CAAC;AACRQ,MAAAA,IAAI,EAAE,iBADE;AAERC,MAAAA,IAAI,EAAEC,MAAM,CAACD;AAFL,KAAD,CAAT;AAID,GAPD,CAOE,OAAOE,GAAP,EAAY;AACZ,UAAMX,GAAG,CAAC;AAAEQ,MAAAA,IAAI,EAAE,iBAAR;AAA2BC,MAAAA,IAAI,EAAEE,GAAG,CAACC,QAAJ,CAAaH;AAA9C,KAAD,CAAT;AACD;AACF;;AAED,SAASM,UAAT,GAAsB;AACpB,SAAOX,KAAK,CAACE,IAAN,CAAW,WAAX,CAAP;AACD;;AAED,UAAUU,OAAV,GAAoB;AAClB,MAAI;AACF;AACA,UAAMb,KAAK,CAAC,IAAD,CAAX;AACA,UAAMH,GAAG,CAAC;AACRQ,MAAAA,IAAI,EAAE,kBADE;AAERC,MAAAA,IAAI,EAAEC,MAAM,CAACD;AAFL,KAAD,CAAT;AAID,GAPD,CAOE,OAAOE,GAAP,EAAY;AACZ,UAAMX,GAAG,CAAC;AAAEQ,MAAAA,IAAI,EAAE,kBAAR;AAA4BC,MAAAA,IAAI,EAAEE,GAAG,CAACC,QAAJ,CAAaH;AAA/C,KAAD,CAAT;AACD;AACF;;AAED,UAAUQ,UAAV,GAAuB;AACrB;AACA,QAAMhB,UAAU,CAAC,gBAAD,EAAmBM,KAAnB,CAAhB;AACD;;AAED,UAAUW,WAAV,GAAwB;AACtB,QAAMjB,UAAU,CAAC,iBAAD,EAAoBa,MAApB,CAAhB;AACD;;AAED,UAAUK,YAAV,GAAyB;AACvB,QAAMjB,QAAQ,CAAC,kBAAD,EAAqBc,OAArB,EAA8B,IAA9B,CAAd;AACD;;AAED,eAAe,UAAUI,QAAV,GAAqB;AAClC,QAAMtB,GAAG,CAAC,CAACC,IAAI,CAACkB,UAAD,CAAL,EAAmBlB,IAAI,CAACmB,WAAD,CAAvB,EAAsCnB,IAAI,CAACoB,YAAD,CAA1C,CAAD,CAAT,CADkC,CACoC;AACvE","sourcesContent":["import {\n  all,\n  fork,\n  put,\n  takeLatest,\n  throttle,\n  delay,\n} from \"redux-saga/effects\";\nimport axios from \"axois\";\n\n// fork - 비동기 함수 호출\n// call - 동기 함수 호출\n// take - 한번만 가져옴\n// takeEvery - 클릭할 때마다 가져옴\n// takeLatest - 마지막으로 누른 것만 인식하고 가져옴(백엔드 상에서는 인식할 수가 없어서 문제)\n// throttle - 시간을 지정해서 그 시간 동안 한번만 가져옴\n\nfunction logInAPI() {\n  return axios.post(\"/api/login\");\n}\n\nfunction* logIn() {\n  try {\n    // const result = yield fork(logInAPI);\n    yield delay(1000);\n    yield put({\n      type: \"LOG_IN_SUCCESS\",\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({ type: \"LOG_IN_FAILURE\", data: err.response.data });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction* logOut() {\n  try {\n    // const result = yield fork(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: \"LOG_OUT_SUCCESS\",\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({ type: \"LOG_OUT_FAILURE\", data: err.response.data });\n  }\n}\n\nfunction addPostAPI() {\n  return axios.post(\"/api/post\");\n}\n\nfunction* addPost() {\n  try {\n    // const result = yield fork(addPostAPI);\n    yield delay(1000);\n    yield put({\n      type: \"ADD_POST_SUCCESS\",\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({ type: \"ADD_POST_FAILURE\", data: err.response.data });\n  }\n}\n\nfunction* watchLogIn() {\n  // 각각의 이벤트 리스너 역할\n  yield takeLatest(\"LOG_IN_REQUEST\", logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(\"LOG_OUT_REQUEST\", logOut);\n}\n\nfunction* watchAddPost() {\n  yield throttle(\"ADD_POST_REQUEST\", addPost, 2000);\n}\n\nexport default function* rootSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchAddPost)]); // all로 이벤트 리스너 등록\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, fork, put, takeLatest, delay } from \"redux-saga/effects\";\nimport axios from \"axois\";\n\nfunction addPostAPI() {\n  return axios.post(\"/api/post\");\n}\n\nfunction addPost() {\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: \"ADD_POST_SUCCESS\"\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            type: \"ADD_POST_FAILURE\",\n            data: _context.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(\"ADD_POST_REQUEST\", addPost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchLogIn), fork(watchLogOut), fork(watchAddPost)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["/Users/dongduu/Desktop/NodeBird_SNS/sagas/index.js"],"names":["addPost","watchAddPost","rootSaga","all","fork","put","takeLatest","delay","axios","addPostAPI","post","type","data","response","watchLogIn","watchLogOut"],"mappings":";;oDAOUA,O;qDAYAC,Y;qDAIeC,Q;;AAvBzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,EAAqCC,KAArC,QAAkD,oBAAlD;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,UAAT,GAAsB;AACpB,SAAOD,KAAK,CAACE,IAAN,CAAW,WAAX,CAAP;AACD;;AAED,SAAUV,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGI,iBAAMO,KAAK,CAAC,IAAD,CAAX;;AAHJ;AAAA;AAII,iBAAMF,GAAG,CAAC;AACRM,YAAAA,IAAI,EAAE;AADE,WAAD,CAAT;;AAJJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAQI,iBAAMN,GAAG,CAAC;AAAEM,YAAAA,IAAI,EAAE,kBAAR;AAA4BC,YAAAA,IAAI,EAAE,YAAIC,QAAJ,CAAaD;AAA/C,WAAD,CAAT;;AARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAYA,SAAUX,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMK,UAAU,CAAC,kBAAD,EAAqBN,OAArB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CAACC,IAAI,CAACU,UAAD,CAAL,EAAmBV,IAAI,CAACW,WAAD,CAAvB,EAAsCX,IAAI,CAACH,YAAD,CAA1C,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, put, takeLatest, delay } from \"redux-saga/effects\";\nimport axios from \"axois\";\n\nfunction addPostAPI() {\n  return axios.post(\"/api/post\");\n}\n\nfunction* addPost() {\n  try {\n    // const result = yield fork(addPostAPI);\n    yield delay(1000);\n    yield put({\n      type: \"ADD_POST_SUCCESS\",\n    });\n  } catch (err) {\n    yield put({ type: \"ADD_POST_FAILURE\", data: err.response.data });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(\"ADD_POST_REQUEST\", addPost);\n}\n\nexport default function* rootSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchAddPost)]); // all로 이벤트 리스너 등록\n}\n"]},"metadata":{},"sourceType":"module"}